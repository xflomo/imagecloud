<?php

namespace Proxies\__CG__\MainBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Files extends \MainBundle\Entity\Files implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'MainBundle\\Entity\\Files' . "\0" . 'uid', '' . "\0" . 'MainBundle\\Entity\\Files' . "\0" . 'pid', '' . "\0" . 'MainBundle\\Entity\\Files' . "\0" . 'urlPath', '' . "\0" . 'MainBundle\\Entity\\Files' . "\0" . 'originalName', '' . "\0" . 'MainBundle\\Entity\\Files' . "\0" . 'hashName', '' . "\0" . 'MainBundle\\Entity\\Files' . "\0" . 'typ', '' . "\0" . 'MainBundle\\Entity\\Files' . "\0" . 'size', '' . "\0" . 'MainBundle\\Entity\\Files' . "\0" . 'changeTime', '' . "\0" . 'MainBundle\\Entity\\Files' . "\0" . 'trash', '' . "\0" . 'MainBundle\\Entity\\Files' . "\0" . 'owner', '' . "\0" . 'MainBundle\\Entity\\Files' . "\0" . 'thumpnailPath', '' . "\0" . 'MainBundle\\Entity\\Files' . "\0" . 'download', '' . "\0" . 'MainBundle\\Entity\\Files' . "\0" . 'uploadTime'];
        }

        return ['__isInitialized__', '' . "\0" . 'MainBundle\\Entity\\Files' . "\0" . 'uid', '' . "\0" . 'MainBundle\\Entity\\Files' . "\0" . 'pid', '' . "\0" . 'MainBundle\\Entity\\Files' . "\0" . 'urlPath', '' . "\0" . 'MainBundle\\Entity\\Files' . "\0" . 'originalName', '' . "\0" . 'MainBundle\\Entity\\Files' . "\0" . 'hashName', '' . "\0" . 'MainBundle\\Entity\\Files' . "\0" . 'typ', '' . "\0" . 'MainBundle\\Entity\\Files' . "\0" . 'size', '' . "\0" . 'MainBundle\\Entity\\Files' . "\0" . 'changeTime', '' . "\0" . 'MainBundle\\Entity\\Files' . "\0" . 'trash', '' . "\0" . 'MainBundle\\Entity\\Files' . "\0" . 'owner', '' . "\0" . 'MainBundle\\Entity\\Files' . "\0" . 'thumpnailPath', '' . "\0" . 'MainBundle\\Entity\\Files' . "\0" . 'download', '' . "\0" . 'MainBundle\\Entity\\Files' . "\0" . 'uploadTime'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Files $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setUid($uid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUid', [$uid]);

        return parent::setUid($uid);
    }

    /**
     * {@inheritDoc}
     */
    public function getUid()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getUid();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUid', []);

        return parent::getUid();
    }

    /**
     * {@inheritDoc}
     */
    public function setPid($pid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPid', [$pid]);

        return parent::setPid($pid);
    }

    /**
     * {@inheritDoc}
     */
    public function getPid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPid', []);

        return parent::getPid();
    }

    /**
     * {@inheritDoc}
     */
    public function setUrlPath($urlPath)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUrlPath', [$urlPath]);

        return parent::setUrlPath($urlPath);
    }

    /**
     * {@inheritDoc}
     */
    public function getUrlPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrlPath', []);

        return parent::getUrlPath();
    }

    /**
     * {@inheritDoc}
     */
    public function setOriginalName($originalName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOriginalName', [$originalName]);

        return parent::setOriginalName($originalName);
    }

    /**
     * {@inheritDoc}
     */
    public function getOriginalName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOriginalName', []);

        return parent::getOriginalName();
    }

    /**
     * {@inheritDoc}
     */
    public function setHashName($hashName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHashName', [$hashName]);

        return parent::setHashName($hashName);
    }

    /**
     * {@inheritDoc}
     */
    public function getHashName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHashName', []);

        return parent::getHashName();
    }

    /**
     * {@inheritDoc}
     */
    public function setTyp($typ)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTyp', [$typ]);

        return parent::setTyp($typ);
    }

    /**
     * {@inheritDoc}
     */
    public function getTyp()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTyp', []);

        return parent::getTyp();
    }

    /**
     * {@inheritDoc}
     */
    public function setSize($size)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSize', [$size]);

        return parent::setSize($size);
    }

    /**
     * {@inheritDoc}
     */
    public function getSize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSize', []);

        return parent::getSize();
    }

    /**
     * {@inheritDoc}
     */
    public function setChangeTime($changeTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChangeTime', [$changeTime]);

        return parent::setChangeTime($changeTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getChangeTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChangeTime', []);

        return parent::getChangeTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setTrash($trash)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTrash', [$trash]);

        return parent::setTrash($trash);
    }

    /**
     * {@inheritDoc}
     */
    public function getTrash()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTrash', []);

        return parent::getTrash();
    }

    /**
     * {@inheritDoc}
     */
    public function setOwner($owner)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOwner', [$owner]);

        return parent::setOwner($owner);
    }

    /**
     * {@inheritDoc}
     */
    public function getOwner()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOwner', []);

        return parent::getOwner();
    }

    /**
     * {@inheritDoc}
     */
    public function setThumpnailPath($thumpnailPath)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setThumpnailPath', [$thumpnailPath]);

        return parent::setThumpnailPath($thumpnailPath);
    }

    /**
     * {@inheritDoc}
     */
    public function getThumpnailPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getThumpnailPath', []);

        return parent::getThumpnailPath();
    }

    /**
     * {@inheritDoc}
     */
    public function setDownload($download)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDownload', [$download]);

        return parent::setDownload($download);
    }

    /**
     * {@inheritDoc}
     */
    public function getDownload()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDownload', []);

        return parent::getDownload();
    }

    /**
     * {@inheritDoc}
     */
    public function setUploadTime($uploadTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUploadTime', [$uploadTime]);

        return parent::setUploadTime($uploadTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getUploadTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUploadTime', []);

        return parent::getUploadTime();
    }

    /**
     * {@inheritDoc}
     */
    public function getContent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContent', []);

        return parent::getContent();
    }

    /**
     * {@inheritDoc}
     */
    public function findeFile($path, $fileName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'findeFile', [$path, $fileName]);

        return parent::findeFile($path, $fileName);
    }

    /**
     * {@inheritDoc}
     */
    public function getFileTmpNameHash($file)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFileTmpNameHash', [$file]);

        return parent::getFileTmpNameHash($file);
    }

}
